# Проект по дисциплине "Программирование"
# Номер проекта: 34
# Описание задания:
#   Расписание приема врача.
#   Создайте класс Patient и класс Doctor.
#   Пусть доктор может принять несколько пациентов, установите расписание того,
#       как доктор будет принимать 16 пациентов в течение 8 часового рабочего дня.

# Выполнили:
#   Смирнов Николай Николаевич (Группа: ПИН-1)
#   Кармицкий Кирилл Сергеевич (Группа: ПИН-1)

patIn = []  # инициализируем глобальный список пациентов (вне функций и циклов, пополняется по ходу работы программы)


def main():  # основное тело программы
    def time():  # функция - генератор выбора времени для 16 пациентов на 8-ми часовой рабочий день
        while True:  # бесконечный цикл на выбор времени (для правильной работы if)
            for item in doc.self_times:
                if item not in doc.self_busyTime:  # проверяем не занято ли сгенерированное время
                    print("Доступное время: " + item)  # отображаем доступное время для записи
                    polvb = int(input("Введите 1, если вас устраивает выбранное время, 2 - если хотите поискать другое.\n"))
                    if polvb == 1:  # если выбранное время устраивает - выполнить присовения, нет - вернуться к началу цикла
                        doc.self_busyTime.append(item)  # добавляем сгенерированное время в занятое время
                        return item  # возвращаем сгенерированное время

    class Doctor:  # создаём класс доктор
        self_name = ""  # даём атрибут уникального имени
        self_times = ['08:00 - 08:30', '08:30 - 09:00', '09:00 - 09:30', '09:30 - 10:00', '10:00 - 10:30', '10:30 - 11:00',
                      '11:00 - 11:30', '11:30 - 12:00', '12:00 - 12:30', '12:30 - 13:00', '13:00 - 13:30', '13:30 - 14:00',
                      '15:00 - 15:30', '15:30 - 16:00', '16:00 - 16:30', '16:30 - 17:00']  # рабочий день и перерыв на обед
        self_busyTime = []  # список занятого времени
        self_date = ""

    class Patient:  # создаём класс пациент
        self_name = ""  # даём уникальный атрибут имени
        self_time_of_receipt = ""  # даём уникальынй атрибут времени приёма

    doc = Doctor()  # создаём объект - доктор из класса доктор
    doc.self_name = input('Введите ФИО доктора: \n')  # Запрашиваем ФИО доктора
    doc.self_date = input('Введите дату записи пациентов для приёма специалиста: \n')  # запрашиваем дату записи пациентов
    for i in range(16):  # создаём 16 объектов - пациентов для доктора
        pat = Patient()  # создаём пациента
        pat.self_name = input('Введите ФИО пациента: \n')  # запрашиваем ФИО пациента
        pat.self_time_of_receipt = time()  # генерируем для пациента время приёма при помощи вызова функции
        print("Пациент " + pat.self_name + "успешно записан на " + pat.self_time_of_receipt + " к доктору - " + doc.self_name + " на " + doc.self_date)  # вывод результата
        patInCh = (pat.self_name + " записан на " + pat.self_time_of_receipt + " к " + doc.self_name + " на " + doc.self_date)  # строка для записи в список
        patIn.append(patInCh)  # запись пациента со всей информацией в список patIn
    print("\nСвобоного времени для записи на текущую дату к выбранному специалисту больше нет.")

while True:  # бесконечный цикл на выполнение тела программы
    print("""
        Программа создаёт расписание приёма врачами пациентов.
        Все инструкции вы получите по ходу выполнения программы.
    Введите 1 чтобы составить новое расписание.
    Введите 2 чтобы просмотреть существующее расписание.
    Введите 3 чтобы очистить созданное расписание.
    Введите 4 чтобы выйти.
        """)
    usintp = int(input())  # принимает выбранный вариант меню
    if usintp == 1:
        main()  # вызываем основное тело - функцию программы
    elif usintp == 2:
        for item in sorted(patIn):  # отображаем глобальный список записей (а sorted должен его сортировать)
            print(item)
    elif usintp == 3:
        patIn.clear()  # полностью очищает список
        print("Расписание успешно очищено!")
    elif usintp == 4:
        break  # останавливаем бесконечный цикл на выполнение тела программы
    else:
        print("Такого пункта в меню нет.")


input("\n\nНажмите Enter, чтобы выйти.")
